<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2006-2012 by Public Library of Science
  ~ http://plos.org
  ~ http://ambraproject.org
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans:beans xmlns="http://www.springframework.org/schema/mvc"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:mvc="http://www.springframework.org/schema/mvc"
             xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

  <!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->

  <!-- Enables the Spring MVC @Controller programming model -->
  <annotation-driven/>

  <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
  <resources mapping="/resources/**" location="/resources/"/>

  <!-- Allow us to use "${foo}" notation to pull values from ambra configuration in this file.  -->
  <beans:bean id="propertyConfigurer" class="org.ambraproject.configuration.SpringPlaceholderConfigurer" />

  <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
  <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <beans:property name="prefix" value="/WEB-INF/views/"/>
    <beans:property name="suffix" value=".jsp"/>
  </beans:bean>

  <context:component-scan base-package="org.ambraproject.rhino"/>
  <context:annotation-config/>

  <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <!-- <beans:property name="maxUploadSize" value=""/> -->
  </beans:bean>

  <!-- Bean config for Hibernate -->
  <beans:bean id="hibernateDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
    <beans:property name="jndiName" value="java:comp/env/jdbc/AmbraDS"/>
  </beans:bean>

  <!-- Bean config for file store -->
  <beans:bean id="fileStoreService" class="org.springframework.jndi.JndiObjectFactoryBean">
    <beans:property name="jndiName" value="java:comp/env/ambra/FileStore"/>
  </beans:bean>

  <beans:bean id="hibernateSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
    <beans:property name="dataSource" ref="hibernateDataSource"/>
    <beans:property name="mappingLocations">
      <beans:list>
        <beans:value>classpath:org/ambraproject/models/*.hbm.xml</beans:value>
      </beans:list>
    </beans:property>
    <beans:property name="hibernateProperties">
      <beans:props>
        <!-- We might use MySQLInnoDBDialect instead -->
        <beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</beans:prop>
        <beans:prop key="hibernate.show_sql">false</beans:prop>
        <beans:prop key="hibernate.format_sql">false</beans:prop>
      </beans:props>
    </beans:property>
  </beans:bean>

  <beans:bean id="rolesEhCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
    <beans:property name="cacheName" value="RolesCache"/>
  </beans:bean>

  <beans:bean id="rolesCache" class="org.ambraproject.service.cache.EhcacheProvider">
    <beans:constructor-arg index="0" ref="rolesEhCache"/>
  </beans:bean>

  <beans:bean id="permissionsService" class="org.ambraproject.service.permission.PermissionsServiceImpl">
    <beans:property name="sessionFactory" ref="hibernateSessionFactory"/>
    <beans:property name="rolesCache" ref="rolesCache"/>
  </beans:bean>

  <beans:bean id="articleService" class="org.ambraproject.service.article.ArticleServiceImpl">
    <beans:property name="sessionFactory" ref="hibernateSessionFactory"/>
    <beans:property name="permissionsService" ref="permissionsService"/>
  </beans:bean>

  <beans:bean id="httpConnectionManagerParams" class="org.apache.commons.httpclient.params.HttpConnectionManagerParams">
    <!-- time out after 30 sec -->
    <beans:property name="soTimeout" value="30000"/>
    <beans:property name="connectionTimeout" value="30000"/>
  </beans:bean>

  <beans:bean id="multiThreadedHttpConnectionManager"
        class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager">
    <beans:property name="params" ref="httpConnectionManagerParams"/>
  </beans:bean>

  <beans:bean id="httpClient" class="org.apache.commons.httpclient.HttpClient">
    <beans:constructor-arg index="0" ref="multiThreadedHttpConnectionManager"/>
  </beans:bean>

  <beans:bean id="articleClassifier" class="org.ambraproject.service.article.AIArticleClassifier">
    <beans:property name="httpClient" ref="httpClient"/>
    <beans:property name="serviceUrl" value="${ambra.services.ai.url}"/>
  </beans:bean>

  <mvc:interceptors>
    <beans:bean class="org.ambraproject.rhino.rest.LoggingInterceptor"/>
  </mvc:interceptors>

</beans:beans>
