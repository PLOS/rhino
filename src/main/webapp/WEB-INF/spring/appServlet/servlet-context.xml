<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2006-2012 by Public Library of Science
  ~ http://plos.org
  ~ http://ambraproject.org
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans:beans xmlns="http://www.springframework.org/schema/mvc"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:mvc="http://www.springframework.org/schema/mvc"
             xmlns:camel="http://camel.apache.org/schema/spring"
             xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

  <!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->

  <!-- Enables the Spring MVC @Controller programming model -->
  <annotation-driven/>

  <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
  <resources mapping="/resources/**" location="/resources/"/>

  <!-- Allow us to use "${foo}" notation to pull values from ambra configuration in this file.  -->
  <beans:bean id="propertyConfigurer" class="org.ambraproject.configuration.SpringPlaceholderConfigurer" />

  <!-- Resolves views selected for rendering by @Controllers to resources in the /WEB-INF/views directory -->
  <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <beans:property name="prefix" value="/WEB-INF/views/"/>
    <beans:property name="suffix" value=".html"/>
  </beans:bean>

  <context:component-scan base-package="org.ambraproject.rhino"/>
  <context:annotation-config/>

  <beans:bean class="org.ambraproject.rhino.config.SwaggerConfiguration" />

  <context:property-placeholder location="classpath:git.properties" ignore-unresolvable="true" />

  <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <!-- <beans:property name="maxUploadSize" value=""/> -->
  </beans:bean>

  <!-- Bean config for Hibernate -->
  <beans:bean id="hibernateDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
    <beans:property name="jndiName" value="java:comp/env/jdbc/AmbraDS"/>
  </beans:bean>

  <beans:bean id="rolesEhCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
    <beans:property name="cacheName" value="RolesCache"/>
  </beans:bean>

  <beans:bean id="rolesCache" class="org.ambraproject.service.cache.EhcacheProvider">
    <beans:constructor-arg index="0" ref="rolesEhCache"/>
  </beans:bean>

  <beans:bean id="permissionsService" class="org.ambraproject.service.permission.PermissionsServiceImpl">
    <beans:property name="sessionFactory" ref="sessionFactory"/>
    <beans:property name="rolesCache" ref="rolesCache"/>
  </beans:bean>

  <beans:bean id="articleService" class="org.ambraproject.service.article.ArticleServiceImpl">
    <beans:property name="sessionFactory" ref="sessionFactory"/>
    <beans:property name="permissionsService" ref="permissionsService"/>
  </beans:bean>

  <beans:bean id="articleClassifier" class="org.ambraproject.rhino.service.classifier.AIArticleClassifier">
    <beans:property name="serviceUrl" value="${ambra.services.ai.url}"/>
    <beans:property name="thesaurus" value="${ambra.services.ai.thesaurus}"/>
    <beans:property name="connectionManager" ref="connectionManager"/>
  </beans:bean>

  <beans:bean id="configurationStore" class="org.ambraproject.configuration.ConfigurationStore"
        factory-method="getInstance" />

  <beans:bean id="ambraConfiguration" factory-bean="configurationStore" factory-method="getConfiguration" />

  <beans:bean id="jmsConnectionFactory" class="org.apache.activemq.spring.ActiveMQConnectionFactory">
    <beans:property name="brokerURL" value="${ambra.services.activemq}"/>
  </beans:bean>

  <!-- setup spring jms TX manager -->
  <beans:bean id="jmsTransactionManager" class="org.springframework.jms.connection.JmsTransactionManager">
    <beans:property name="connectionFactory" ref="jmsConnectionFactory"/>
  </beans:bean>

  <!-- define Camel activemq component -->
  <beans:bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
    <beans:property name="connectionFactory" ref="jmsConnectionFactory"/>
    <beans:property name="transacted" value="true"/>
    <beans:property name="transactionManager" ref="jmsTransactionManager"/>
    <beans:property name="recoveryInterval" value="10000"/>
    <beans:property name="receiveTimeout" value="5000"/>
  </beans:bean>

  <beans:bean id="PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
    <beans:property name="transactionManager" ref="jmsTransactionManager"/>
  </beans:bean>

  <camel:camelContext xmlns="http://camel.apache.org/schema/spring">
    <camel:jmxAgent id="plos-queue" createConnector="false"/>
    <camel:template id="messageProducerTemplate"/>
  </camel:camelContext>

  <beans:bean id="messageSender" class="org.ambraproject.queue.CamelSender" depends-on="activemq">
    <beans:property name="producerTemplate" ref="messageProducerTemplate"/>
  </beans:bean>

  <beans:bean id="messageService" class="org.ambraproject.queue.MessageServiceImpl">
    <beans:property name="sender" ref="messageSender"/>
    <beans:property name="ambraConfiguration" ref="ambraConfiguration"/>
  </beans:bean>

  <beans:bean id="syndicationService" class="org.ambraproject.service.syndication.impl.SyndicationServiceImpl">
    <beans:property name="sessionFactory" ref="sessionFactory"/>
    <beans:property name="ambraConfiguration" ref="ambraConfiguration"/>
    <beans:property name="messageService" ref="messageService"/>
<!--    <beans:property name="journalService" ref="journalService"/> -->
  </beans:bean>

  <!-- Note: the next two beans are included only because taxonomyService depends on them,
       even though our current use of this class doesn't call them.                      -->
  <beans:bean id="solrServerFactory" class="org.ambraproject.service.search.SolrServerFactory">
    <beans:constructor-arg ref="ambraConfiguration"/>
  </beans:bean>

  <beans:bean id="searchService" class="org.ambraproject.service.search.SolrSearchService">
    <beans:property name="configuration" ref="ambraConfiguration"/>
    <beans:property name="serverFactory" ref="solrServerFactory"/>
  </beans:bean>

  <beans:bean id="cacheFactory" class="org.ambraproject.rhino.cache.CacheFactory" factory-method="getInstance" />

  <beans:bean id="rhinoCache" factory-bean="cacheFactory" factory-method="getCache"/>

  <beans:bean id="taxonomyService" class="org.ambraproject.service.taxonomy.TaxonomyServiceImpl">
    <beans:property name="cache" ref="rhinoCache" />
    <beans:property name="searchService" ref="searchService" />
    <beans:property name="sessionFactory" ref="sessionFactory" />
    <beans:property name="permissionsService" ref="permissionsService"/>
  </beans:bean>

  <mvc:interceptors>
    <beans:bean class="org.ambraproject.rhino.rest.LoggingInterceptor"/>
  </mvc:interceptors>

  <!-- Serve static content-->
  <mvc:default-servlet-handler/>

</beans:beans>
